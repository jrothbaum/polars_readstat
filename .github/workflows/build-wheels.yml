name: Build and publish polars_readstat
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        python-version: ["3.9"] # , "3.10", "3.11", "3.12"]
        include:
          - os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
          - os: macos-13  # Intel runner
            rust-target: x86_64-apple-darwin
          - os: macos-14  # ARM runner  
            rust-target: aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
        shell: bash

      - name: Add uv to PATH (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        shell: bash

      - name: Add uv to PATH (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "$env:USERPROFILE\.cargo\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell

      - name: Verify uv installation
        run: |
          uv --version
        shell: bash

      - name: Install ReadStat dependencies (macOS)
        if: startsWith(matrix.os, 'macos-')
        run: |
          brew install autoconf automake libtool

      - name: Install ReadStat dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install msys2 llvm
          C:\tools\msys64\usr\bin\bash -lc "pacman -S --noconfirm autoconf automake libtool make pkg-config zlib-devel"
          echo "C:\tools\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "LIBCLANG_PATH=C:\Program Files\LLVM\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: powershell

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      - name: Install Python dependencies with uv (no local build)
        run: |
          uv sync --no-install-project --group build --no-install-project
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH
        shell: bash

      - name: Add venv to PATH (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH
        shell: bash

      - name: Add venv to PATH (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "$(Get-Location)\.venv\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell

      - name: Install Linux build dependencies 
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang libclang-dev llvm-dev
        shell: bash

        
      - name: Build wheels (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          uv run --no-install-project --no-compile maturin build --release --strip --out dist --interpreter ${{ steps.setup-python.outputs.python-path }} --target ${{ matrix.rust-target }} --compatibility manylinux_2_28
        env:
          RUST_BACKTRACE: full
          BINDGEN_EXTRA_CLANG_ARGS: "-I/usr/include/clang"
        shell: bash

      - name: Build wheels (macOS)
        if: startsWith(matrix.os, 'macos-')
        run: |
          uv run --no-install-project --no-compile maturin build --release --strip --out dist --interpreter ${{ steps.setup-python.outputs.python-path }} --target ${{ matrix.rust-target }}
        shell: bash

      - name: Build wheels (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          uv run --no-install-project --no-compile maturin build --release --strip --out dist --interpreter python --target ${{ matrix.rust-target }}
        shell: bash



      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write 
    steps:
      - uses: actions/checkout@v4
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*.whl
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
