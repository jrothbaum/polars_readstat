name: Build and publish polars_readstat
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        include:
          - os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
          - os: macos-latest
            rust-target: x86_64-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
        shell: bash

      - name: Add uv to PATH
        run: |
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        shell: bash

      - name: Install ReadStat dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install autoconf automake libtool

      - name: Install ReadStat dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install msys2 llvm
          C:\tools\msys64\usr\bin\bash -lc "pacman -S --noconfirm autoconf automake libtool make pkg-config zlib-devel"
          echo "C:\tools\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "LIBCLANG_PATH=C:\Program Files\LLVM\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: powershell

      - name: Install LLVM, Clang & ReadStat dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -y
          # Install clang, llvm, libclang-dev (for bindgen), and build tools
          sudo apt-get install -y clang llvm libclang-dev build-essential autoconf automake libtool pkg-config zlib1g-dev
          # Find the libclang library directory more robustly
          # dpkg -L libclang-dev lists files, grep for libclang.so, get dirname, take first line
          LIBCLANG_DIR=$(dpkg -L libclang-dev | grep '/libclang\.so$' | xargs -n 1 dirname | head -n 1)
          if [ -z "$LIBCLANG_DIR" ]; then
            echo "::error::Could not find libclang.so directory after installing libclang-dev"
            # Fallback attempt with find, though less reliable
            LIBCLANG_DIR=$(find /usr/lib /usr/lib64 -name libclang.so | head -n 1 | xargs dirname)
            if [ -z "$LIBCLANG_DIR" ]; then
              echo "::error::Fallback find command also failed to locate libclang.so directory"
              exit 1
            fi
            echo "::warning::Found libclang.so using find: $LIBCLANG_DIR"
          else
            echo "Found libclang.so directory using dpkg: $LIBCLANG_DIR"
          fi
          echo "LIBCLANG_PATH=$LIBCLANG_DIR" >> $GITHUB_ENV
          echo "Setting LIBCLANG_PATH=$LIBCLANG_DIR" # For logging
          ls -l "$LIBCLANG_DIR/libclang.so"* # Verify file exists
        shell: bash

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      - name: Install build dependencies
        run: |
          uv pip install --system maturin
        shell: bash
      - name: Install LLVM & Clang
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libclang-dev llvm-dev clang
          find /usr/lib -name "libclang.so*" || true
      - name: Set LIBCLANG_PATH
        if: matrix.os == 'ubuntu-latest'
        run: |
          export LIBCLANG_PATH=$(find /usr/lib -name "libclang.so" | grep -m1 libclang.so | xargs dirname)
          echo "LIBCLANG_PATH=$LIBCLANG_PATH" >> $GITHUB_ENV
      - name: Build wheels (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: PyO3/maturin-action@v1
        # LIBCLANG_PATH should be inherited from the environment set in the previous step via GITHUB_ENV
        # No explicit 'env:' block needed here unless the previous step failed
        with:
          target: ${{ matrix.rust-target }}
          manylinux: auto # Use manylinux for broader compatibility
          args: --release --strip --out dist -vv # Added verbosity
      - name: Build wheels (macOS & Windows)
        if: matrix.os != 'ubuntu-latest'
        
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.rust-target }}
          args: --release --strip --out dist
          singlefile: true 

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist