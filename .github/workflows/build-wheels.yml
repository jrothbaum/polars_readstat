name: Build and publish polars_readstat
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9"] # , "3.10", "3.11", "3.12"]
        include:
          - os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
          - os: macos-latest
            rust-target: x86_64-apple-darwin
          - os: macos-latest
            rust-target: aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
        shell: bash

      - name: Add uv to PATH
        run: |
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        shell: bash

      - name: Install ReadStat dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install autoconf automake libtool

      - name: Install ReadStat dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install msys2 llvm
          C:\tools\msys64\usr\bin\bash -lc "pacman -S --noconfirm autoconf automake libtool make pkg-config zlib-devel"
          echo "C:\tools\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "LIBCLANG_PATH=C:\Program Files\LLVM\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: powershell

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      - name: Install build dependencies
        run: |
          uv sync --group dev
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH
        shell: bash
      - name: Build wheels (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: PyO3/maturin-action@v1
        env:
          RUST_BACKTRACE: full
          # Tell bindgen where to find libclang headers (adjust if needed)
          BINDGEN_EXTRA_CLANG_ARGS: "-I/usr/include/clang" 
        with:
          interpreter: ${{ steps.setup-python.outputs.python-path }} # Pass interpreter path
          target: ${{ matrix.rust-target }}
          
          manylinux: "2_28" 
          args: --release --strip --out dist
          before-script-linux: |
            set -ex # Fail fast and print commands
            # Use dnf (package manager for AlmaLinux 8 / CentOS 8+)
            # Install clang and its development libraries. 
            # Check exact package names, might be llvm-devel, libclang-devel, etc.
            dnf install -y clang-devel llvm-devel 
            # Verify version (optional)
            clang --version
            # Setting LIBCLANG_PATH might still be needed depending on the crate
            # Find the libclang.so path. Common locations:
            export LIBCLANG_PATH=$(find /usr/lib64 /usr/lib -name "libclang.so.*" | head -n 1 | xargs dirname || echo "/usr/lib64/llvm") # Adjust find paths if needed
            echo "LIBCLANG_PATH=${LIBCLANG_PATH}"
            # Ensure the linker can find llvm libs if needed directly
            export LD_LIBRARY_PATH=${LIBCLANG_PATH}:${LD_LIBRARY_PATH}
      - name: Build wheels (macOS & Windows)
        if: matrix.os != 'ubuntu-latest'
        
        uses: PyO3/maturin-action@v1
        with:
          interpreter: ${{ steps.setup-python.outputs.python-path }} # Pass interpreter path
          target: ${{ matrix.rust-target }}
          args: --release --strip --out dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write 
    steps:
      - uses: actions/checkout@v4
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*.whl
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
